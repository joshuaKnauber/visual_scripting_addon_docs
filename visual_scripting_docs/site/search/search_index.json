{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This will hold the documentation for the visual scripting addon","title":"Introduction"},{"location":"#introduction","text":"This will hold the documentation for the visual scripting addon","title":"Introduction"},{"location":"developers/","text":"Introduction The addon allows you to create packages of nodes that can be installed by the user. You are free to develop these packages and share or sell them. If you develop a package, please let us know so we can promote it. This documentation will teach you how we suggest you develop a node package and what we require. What you can do Your package contains custom nodes which can then be used to create addons. The basic idea is that each node returns a dictionary with the code structure. This will then be compiled by the visual scripting addon to create the final python code. This will be explained in more detail in this documentation. Development The basic structure which you will develop is the following: You will distribute a .zip file to others which can then be installed in the addons user preferences. Your zip file can hold multiple folders. These folders are where the .py files for the nodes go. Each python file equals to one node. The folders correspond to the node categories. These are the lists that show up in the Node Add menu. Example: If you want to create a node in the Interface category, you'd add a folder called Interface and a python file inside that folder. This will be where the code for your node goes. You can't nest folders to create subcategories! If you create a folder with a name that doesn't exist yet, that category will be created. Finally you will need a package_info.json file which also goes in the zip file. This holds information on your package. This will be explained in more detail as well.","title":"Introduction"},{"location":"developers/#introduction","text":"The addon allows you to create packages of nodes that can be installed by the user. You are free to develop these packages and share or sell them. If you develop a package, please let us know so we can promote it. This documentation will teach you how we suggest you develop a node package and what we require.","title":"Introduction"},{"location":"developers/#what-you-can-do","text":"Your package contains custom nodes which can then be used to create addons. The basic idea is that each node returns a dictionary with the code structure. This will then be compiled by the visual scripting addon to create the final python code. This will be explained in more detail in this documentation.","title":"What you can do"},{"location":"developers/#development","text":"The basic structure which you will develop is the following: You will distribute a .zip file to others which can then be installed in the addons user preferences. Your zip file can hold multiple folders. These folders are where the .py files for the nodes go. Each python file equals to one node. The folders correspond to the node categories. These are the lists that show up in the Node Add menu. Example: If you want to create a node in the Interface category, you'd add a folder called Interface and a python file inside that folder. This will be where the code for your node goes. You can't nest folders to create subcategories! If you create a folder with a name that doesn't exist yet, that category will be created. Finally you will need a package_info.json file which also goes in the zip file. This holds information on your package. This will be explained in more detail as well.","title":"Development"},{"location":"developers/categories/","text":"Setting up a node category Naming: To add a new node category, create a new folder in the nodes directory. The name of this folder will be used as the name of the category. Here the underscores will be replaced with spaces and the first letters of words will be made uppercase. However you can just use spaces in the name as well. If you create a folder called my_awesome_node_category , the node category will be called My Awesome Node Category . Init file: To get the addon to recognize your category, you need to add a file called __init__.py inside the folder. This file can be empty but it needs to be there. However it's important to know that this is not required to be included in the final package, even if you create new categories. It's just needed during development. Notes: It's important to know that empty categories will not be shown. This means that after you have created your category, you need to add a node to it first for it to be shown in the add node panel.","title":"Creating Categories"},{"location":"developers/categories/#setting-up-a-node-category","text":"Naming: To add a new node category, create a new folder in the nodes directory. The name of this folder will be used as the name of the category. Here the underscores will be replaced with spaces and the first letters of words will be made uppercase. However you can just use spaces in the name as well. If you create a folder called my_awesome_node_category , the node category will be called My Awesome Node Category . Init file: To get the addon to recognize your category, you need to add a file called __init__.py inside the folder. This file can be empty but it needs to be there. However it's important to know that this is not required to be included in the final package, even if you create new categories. It's just needed during development. Notes: It's important to know that empty categories will not be shown. This means that after you have created your category, you need to add a node to it first for it to be shown in the add node panel.","title":"Setting up a node category"},{"location":"developers/distributing/","text":"Distributing To distribute your package, create a zip file. The name of this file doesn't matter. Package Info To distribute your package to others, you'll need to create a package_info.json file. The file should look like this: { \"name\": \"Name Of Your Package\", \"description\": \"This is the packages description\", \"author\": \"Your Name\", \"nodes\": [ ] } name: This is the name of your package which will be shown in the user preferences description: This is the description of your package which will be shown in the user preferences autor: You can put your name here to be shown in the user preferences nodes: This is a list of all nodes that are contained in your package. This is explained below The package_info.json file goes right in the root of your zip file. The node category folders with the node python files should also go in the zip file. The folder structure should look like this: .zip file |_package_info.json |\\category one |____node_one.py |____node_two.py |\\category two |____node_three.py The nodes parameter in the package_json should be a list of strings. Those strings should be relative filepaths to the different nodes. An example could look like this: [\"category one/node_one.py\", \"category one/node_two.py\", \"category two/node_three.py\"] Once you finished packing up your zip file you are ready to distribute it to other people! Once again, make sure to let us know if you create a package so we can promote it.","title":"Distributing"},{"location":"developers/distributing/#distributing","text":"To distribute your package, create a zip file. The name of this file doesn't matter.","title":"Distributing"},{"location":"developers/distributing/#package-info","text":"To distribute your package to others, you'll need to create a package_info.json file. The file should look like this: { \"name\": \"Name Of Your Package\", \"description\": \"This is the packages description\", \"author\": \"Your Name\", \"nodes\": [ ] } name: This is the name of your package which will be shown in the user preferences description: This is the description of your package which will be shown in the user preferences autor: You can put your name here to be shown in the user preferences nodes: This is a list of all nodes that are contained in your package. This is explained below The package_info.json file goes right in the root of your zip file. The node category folders with the node python files should also go in the zip file. The folder structure should look like this: .zip file |_package_info.json |\\category one |____node_one.py |____node_two.py |\\category two |____node_three.py The nodes parameter in the package_json should be a list of strings. Those strings should be relative filepaths to the different nodes. An example could look like this: [\"category one/node_one.py\", \"category one/node_two.py\", \"category two/node_three.py\"] Once you finished packing up your zip file you are ready to distribute it to other people! Once again, make sure to let us know if you create a package so we can promote it.","title":"Package Info"},{"location":"developers/nodes/","text":"Setting up a node Python file: To create a node, add your python file in the category directory you want it to go in. The name of the file doesn't matter. Imports: To create a scripting node, you'll need to import a few things. You can just copy the code below to get started: import bpy from ..base.base_node import SN_ScriptingBaseNode from ...compile.compiler import compiler bpy: This is obviously needed to create a custom node in blender SN_ScriptingBaseNode: This is the basic Scripting Node which your created node will inherit from compiler: This function returns the compiler object. You will only need one function from this as explained below The node: Here's the basic code for creating a node: class SN_NodeName(bpy.types.Node, SN_ScriptingBaseNode): bl_idname = \"SN_NodeName\" bl_label = \"The Nodes Label\" _should_be_registered = False @classmethod def poll(cls, ntree): return ntree.bl_idname == 'ScriptingNodesTree' def socket_update(self, context): compiler().socket_update(context) def init(self, context): pass def draw_buttons(self, context, layout): pass def copy(self, node): pass def free(self): pass def evaluate(self, output): return { \"blocks\": [], \"errors\": [] } def needed_imports(self): return [] def get_register_block(self): return [] def get_unregister_block(self): return [] should_be_registered : This property defines if the node should be registered. This should be true if the result of the node should add something to the register and unregister functions. Examples of this are the Create Operator and Create Panel nodes.","title":"Creating Nodes"},{"location":"developers/nodes/#setting-up-a-node","text":"Python file: To create a node, add your python file in the category directory you want it to go in. The name of the file doesn't matter. Imports: To create a scripting node, you'll need to import a few things. You can just copy the code below to get started: import bpy from ..base.base_node import SN_ScriptingBaseNode from ...compile.compiler import compiler bpy: This is obviously needed to create a custom node in blender SN_ScriptingBaseNode: This is the basic Scripting Node which your created node will inherit from compiler: This function returns the compiler object. You will only need one function from this as explained below The node: Here's the basic code for creating a node: class SN_NodeName(bpy.types.Node, SN_ScriptingBaseNode): bl_idname = \"SN_NodeName\" bl_label = \"The Nodes Label\" _should_be_registered = False @classmethod def poll(cls, ntree): return ntree.bl_idname == 'ScriptingNodesTree' def socket_update(self, context): compiler().socket_update(context) def init(self, context): pass def draw_buttons(self, context, layout): pass def copy(self, node): pass def free(self): pass def evaluate(self, output): return { \"blocks\": [], \"errors\": [] } def needed_imports(self): return [] def get_register_block(self): return [] def get_unregister_block(self): return [] should_be_registered : This property defines if the node should be registered. This should be true if the result of the node should add something to the register and unregister functions. Examples of this are the Create Operator and Create Panel nodes.","title":"Setting up a node"},{"location":"developers/setup/","text":"Setup This will tell you how we recommend developing a package. If you find another way to do it, feel free to do so. Project setup Start by finding the folder where you have installed the visual scripting addon. You can find this in the user preferences in the addons panel under File . In this folder you'll find a folder called nodes. This is the folder you'll work in. When you open up the folder you will find the directories corresponding to the node categories, mentioned in the introduction. These are the installed categories and nodes. When a user installs your package, the zip files content will go in here. Start by opening the nodes folder in your IDE of choice. We use Visual Studio Code, but you can use whatever you'd like for this. In the nodes folder you'll find a folder called base . This folder holds some of the basic functionality regarding the nodes and node trees. You won't need to pay any attention to this folder. You can't add nodes in here either as it's not a category. All other folders are existing categories with existing nodes. Here you can add your own nodes. You should now be able to add nodes as explained below. To reload any changes you make, restart blender.","title":"Project Setup"},{"location":"developers/setup/#setup","text":"This will tell you how we recommend developing a package. If you find another way to do it, feel free to do so.","title":"Setup"},{"location":"developers/setup/#project-setup","text":"Start by finding the folder where you have installed the visual scripting addon. You can find this in the user preferences in the addons panel under File . In this folder you'll find a folder called nodes. This is the folder you'll work in. When you open up the folder you will find the directories corresponding to the node categories, mentioned in the introduction. These are the installed categories and nodes. When a user installs your package, the zip files content will go in here. Start by opening the nodes folder in your IDE of choice. We use Visual Studio Code, but you can use whatever you'd like for this. In the nodes folder you'll find a folder called base . This folder holds some of the basic functionality regarding the nodes and node trees. You won't need to pay any attention to this folder. You can't add nodes in here either as it's not a category. All other folders are existing categories with existing nodes. Here you can add your own nodes. You should now be able to add nodes as explained below. To reload any changes you make, restart blender.","title":"Project setup"}]}